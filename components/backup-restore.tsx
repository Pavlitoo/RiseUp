import { ThemedText } from '@/components/themed-text';
import { ThemedView } from '@/components/themed-view';
import { useAuth } from '@/hooks/use-auth';
import { useThemeColor } from '@/hooks/use-theme-color';
import { useTranslations } from '@/hooks/use-translations';
import { firebaseService } from '@/services/FirebaseService';
import * as DocumentPicker from 'expo-document-picker';
import * as FileSystem from "expo-file-system/legacy";
import * as Haptics from 'expo-haptics';
import * as Sharing from 'expo-sharing';
import React, { useState } from 'react';
import { Alert, StyleSheet, TouchableOpacity, View } from 'react-native';
import Animated, { FadeIn } from 'react-native-reanimated';

export function BackupRestore() {
  const { authState } = useAuth();
  const t = useTranslations();
  const backgroundColor = useThemeColor({}, 'background');
  const cardBackground = useThemeColor({}, 'cardBackground');
  const borderColor = useThemeColor({}, 'border');
  const primaryColor = useThemeColor({}, 'primary');
  const warningColor = useThemeColor({}, 'warning');

  const [loading, setLoading] = useState(false);

  const handleBackup = async () => {
    if (!authState.user) return;

    if (process.env.EXPO_OS !== 'web') {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    }

    setLoading(true);
    
    try {
      const exportData = await firebaseService.exportUserData(authState.user.id);
      
      const fileName = `riseup_backup_${new Date().toISOString().split('T')[0]}.json`;
      const fileUri = `${(FileSystem as any).documentDirectory || ''}${fileName}`;
      
      await FileSystem.writeAsStringAsync(fileUri, JSON.stringify(exportData, null, 2));
      
      if (await Sharing.isAvailableAsync()) {
        await Sharing.shareAsync(fileUri, {
          mimeType: 'application/json',
          dialogTitle: '–ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é RiseUp',
        });
      } else {
        Alert.alert(
          '–†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞',
          `–§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${fileName}`,
          [{ text: 'OK' }]
        );
      }
      
      if (process.env.EXPO_OS !== 'web') {
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      }
    } catch (error) {
      console.error('Backup failed:', error);
      Alert.alert('–ü–æ–º–∏–ª–∫–∞', '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é');
    } finally {
      setLoading(false);
    }
  };

  const handleRestore = async () => {
    if (!authState.user) return;

    Alert.alert(
      '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö',
      '–¶–µ –∑–∞–º—ñ–Ω–∏—Ç—å –≤—Å—ñ –≤–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?',
      [
        { text: '–°–∫–∞—Å—É–≤–∞—Ç–∏', style: 'cancel' },
        { 
          text: '–í—ñ–¥–Ω–æ–≤–∏—Ç–∏', 
          style: 'destructive',
          onPress: performRestore
        }
      ]
    );
  };

  const performRestore = async () => {
    if (process.env.EXPO_OS !== 'web') {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);
    }

    setLoading(true);
    
    try {
      const result = await DocumentPicker.getDocumentAsync({
        type: 'application/json',
        copyToCacheDirectory: true,
      });

      if (result.canceled || !result.assets || result.assets.length === 0) {
        setLoading(false);
        return;
      }

      const fileContent = await FileSystem.readAsStringAsync(result.assets[0].uri);
      const importData = JSON.parse(fileContent);
      
      // Validate backup file
      if (!importData.userId || !importData.data || !importData.version) {
        throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó');
      }

      await firebaseService.importUserData(authState.user!.id, importData);
      
      Alert.alert(
        '–£—Å–ø—ñ—Ö',
        '–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω.',
        [{ text: 'OK' }]
      );
      
      if (process.env.EXPO_OS !== 'web') {
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      }
    } catch (error) {
      console.error('Restore failed:', error);
      Alert.alert('–ü–æ–º–∏–ª–∫–∞', '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É');
    } finally {
      setLoading(false);
    }
  };

  return (
    <ThemedView style={[styles.container, { backgroundColor }]}>
      <View style={styles.header}>
        <ThemedText type="title" style={styles.title}>
          üíæ –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
        </ThemedText>
        <ThemedText style={styles.subtitle}>
          –ó–±–µ—Ä–µ–∂—ñ—Ç—å —Ç–∞ –≤—ñ–¥–Ω–æ–≤—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ
        </ThemedText>
      </View>

      <Animated.View 
        entering={FadeIn.duration(800)}
        style={[styles.section, { backgroundColor: cardBackground, borderColor }]}
      >
        <ThemedText type="subtitle" style={styles.sectionTitle}>
          üì§ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
        </ThemedText>
        
        <ThemedText style={styles.description}>
          –ó–±–µ—Ä–µ–∂—ñ—Ç—å –≤—Å—ñ –≤–∞—à—ñ –∑–≤–∏—á–∫–∏, –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É —Ñ–∞–π–ª. 
          –¶–µ–π —Ñ–∞–π–ª –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞ —ñ–Ω—à–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó.
        </ThemedText>
        
        <TouchableOpacity
          style={[styles.button, { backgroundColor: primaryColor }]}
          onPress={handleBackup}
          disabled={loading}
        >
          <ThemedText style={[styles.buttonText, { color: 'white' }]}>
            {loading ? '‚è≥ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è...' : 'üì§ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é'}
          </ThemedText>
        </TouchableOpacity>
      </Animated.View>

      <Animated.View 
        entering={FadeIn.delay(200).duration(800)}
        style={[styles.section, { backgroundColor: cardBackground, borderColor }]}
      >
        <ThemedText type="subtitle" style={styles.sectionTitle}>
          üì• –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó
        </ThemedText>
        
        <View style={[styles.warningBox, { backgroundColor: 'rgba(245, 158, 11, 0.1)', borderColor: warningColor }]}>
          <ThemedText style={[styles.warningIcon, { color: warningColor }]}>‚ö†Ô∏è</ThemedText>
          <ThemedText style={[styles.warningText, { color: warningColor }]}>
            –£–≤–∞–≥–∞! –¶–µ –∑–∞–º—ñ–Ω–∏—Ç—å –≤—Å—ñ –≤–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ.
          </ThemedText>
        </View>
        
        <ThemedText style={styles.description}>
          –û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö. 
          –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ü–∏–º –¥–æ–¥–∞—Ç–∫–æ–º.
        </ThemedText>
        
        <TouchableOpacity
          style={[styles.button, { backgroundColor: warningColor }]}
          onPress={handleRestore}
          disabled={loading}
        >
          <ThemedText style={[styles.buttonText, { color: 'white' }]}>
            {loading ? '‚è≥ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è...' : 'üì• –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ'}
          </ThemedText>
        </TouchableOpacity>
      </Animated.View>

      <Animated.View 
        entering={FadeIn.delay(400).duration(800)}
        style={[styles.infoSection, { backgroundColor: cardBackground, borderColor }]}
      >
        <ThemedText type="subtitle" style={styles.sectionTitle}>
          ‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        </ThemedText>
        
        <View style={styles.infoList}>
          <View style={styles.infoItem}>
            <ThemedText style={styles.infoIcon}>üîí</ThemedText>
            <ThemedText style={styles.infoText}>
              –í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ —Ç–∞ –≤ Firebase
            </ThemedText>
          </View>
          
          <View style={styles.infoItem}>
            <ThemedText style={styles.infoIcon}>‚òÅÔ∏è</ThemedText>
            <ThemedText style={styles.infoText}>
              –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
            </ThemedText>
          </View>
          
          <View style={styles.infoItem}>
            <ThemedText style={styles.infoIcon}>üì±</ThemedText>
            <ThemedText style={styles.infoText}>
              –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä–æ–±–æ—Ç–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ
            </ThemedText>
          </View>
          
          <View style={styles.infoItem}>
            <ThemedText style={styles.infoIcon}>üîÑ</ThemedText>
            <ThemedText style={styles.infoText}>
              –†–µ–≥—É–ª—è—Ä–Ω–æ —Å—Ç–≤–æ—Ä—é–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó –¥–ª—è –±–µ–∑–ø–µ–∫–∏
            </ThemedText>
          </View>
        </View>
      </Animated.View>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  header: {
    alignItems: 'center',
    marginBottom: 30,
    paddingTop: 20,
  },
  title: {
    textAlign: 'center',
    marginBottom: 8,
  },
  subtitle: {
    textAlign: 'center',
    fontSize: 16,
    opacity: 0.7,
  },
  section: {
    borderRadius: 16,
    padding: 20,
    marginVertical: 10,
    borderWidth: 1,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  sectionTitle: {
    textAlign: 'center',
    marginBottom: 16,
  },
  description: {
    fontSize: 14,
    lineHeight: 20,
    opacity: 0.8,
    marginBottom: 20,
    textAlign: 'center',
  },
  button: {
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.2,
    shadowRadius: 3,
    elevation: 3,
  },
  buttonText: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  warningBox: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    marginBottom: 16,
  },
  warningIcon: {
    fontSize: 16,
    marginRight: 8,
  },
  warningText: {
    flex: 1,
    fontSize: 14,
    fontWeight: '600',
  },
  infoSection: {
    borderRadius: 16,
    padding: 20,
    marginVertical: 10,
    borderWidth: 1,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  infoList: {
    gap: 12,
  },
  infoItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
  },
  infoIcon: {
    fontSize: 16,
    marginRight: 12,
    marginTop: 2,
  },
  infoText: {
    flex: 1,
    fontSize: 14,
    lineHeight: 18,
    opacity: 0.8,
  },
});